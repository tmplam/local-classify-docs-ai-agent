"""
Human Feedback Agent module for processing user feedback and applying context adaptation.
"""
import os
import re
import json
import traceback
import logging
from typing import Dict, Any, List, Optional, Tuple

from langchain_core.messages import HumanMessage, AIMessage

# Setup logging
def log(message, level='info'):
    """Log a message with the specified level."""
    if level == 'info':
        logging.info(message)
    elif level == 'error':
        logging.error(message)
    elif level == 'warning':
        logging.warning(message)
    else:
        logging.debug(message)

class HumanFeedbackAgent:
    """Agent for processing human feedback and applying context adaptation."""
    
    def __init__(self, session_id: str = None):
        """Initialize the HumanFeedbackAgent."""
        self.session_id = session_id
        self.memory_file = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "memory.json")
        self.feedback_memory = self.load_feedback_memory()
        
    def load_feedback_memory(self) -> Dict[str, Any]:
        """
        Load feedback memory from the memory.json file if it exists.
        
        Returns:
            Dict containing the feedback memory
        """
        memory = {"classification_feedback": {}}
        
        if os.path.exists(self.memory_file):
            try:
                with open(self.memory_file, 'r', encoding='utf-8') as f:
                    memory = json.load(f)
                log(f"Loaded feedback memory from {self.memory_file}: {memory}", level='info')
            except Exception as e:
                log(f"Error loading feedback memory: {e}", level='error')
                # Initialize with empty structure if loading fails
        else:
            log(f"Memory file {self.memory_file} does not exist yet. Initializing empty memory.", level='info')
            
        return memory
            
    def save_feedback_memory(self) -> None:
        """
        Save feedback memory to the memory.json file.
        """
        try:
            # Ensure we're using UTF-8 encoding and not escaping non-ASCII characters
            with open(self.memory_file, 'w', encoding='utf-8') as f:
                json.dump(self.feedback_memory, f, ensure_ascii=False, indent=2)
            log(f"Saved feedback memory to {self.memory_file} with UTF-8 encoding", level='info')
            
            # Verify the saved content by reading it back
            if os.path.exists(self.memory_file):
                with open(self.memory_file, 'r', encoding='utf-8') as f:
                    saved_content = json.load(f)
                log(f"Verified saved content: {saved_content}", level='info')
        except Exception as e:
            log(f"Error saving feedback memory: {e}", level='error')
            
    def get_stored_classification(self, file_name: str) -> Optional[str]:
        """
        Get stored classification for a file from memory.
        
        Args:
            file_name: Name of the file or path to get classification for
            
        Returns:
            Classification string if found, None otherwise
        """
        if not self.feedback_memory or "classification_feedback" not in self.feedback_memory:
            log(f"No classification feedback memory found", level='info')
            return None
            
        # Get basename to normalize comparisons
        basename = os.path.basename(file_name)
        log(f"Looking for stored classification for file: {file_name}, basename: {basename}", level='info')
        log(f"Available keys in memory: {list(self.feedback_memory['classification_feedback'].keys())}", level='info')
        
        # Try exact match first
        if file_name in self.feedback_memory["classification_feedback"]:
            classification = self.feedback_memory["classification_feedback"][file_name]
            log(f"Found exact match for {file_name}: {classification}", level='info')
            return classification
            
        # Try matching just the basename
        if basename in self.feedback_memory["classification_feedback"]:
            classification = self.feedback_memory["classification_feedback"][basename]
            log(f"Found match by basename for {basename}: {classification}", level='info')
            return classification
            
        # Check if any key ends with the file_name
        for key, value in self.feedback_memory["classification_feedback"].items():
            if key.endswith(basename):
                log(f"Found match by key ending with basename. Key: {key}, Value: {value}", level='info')
                return value
                
        log(f"No stored classification found for {file_name}", level='info')
        return None
    
    async def is_feedback_message(self, message: str) -> bool:
        """
        Ki·ªÉm tra xem tin nh·∫Øn c√≥ ph·∫£i l√† ph·∫£n h·ªìi t·ª´ ng∆∞·ªùi d√πng kh√¥ng.
        
        Args:
            message: N·ªôi dung tin nh·∫Øn c·∫ßn ki·ªÉm tra
            
        Returns:
            True n·∫øu tin nh·∫Øn l√† ph·∫£n h·ªìi, False n·∫øu kh√¥ng ph·∫£i
        """
        # Ghi log tin nh·∫Øn c·∫ßn ki·ªÉm tra
        log(f"üîç [FEEDBACK DETECTION] Ki·ªÉm tra tin nh·∫Øn: '{message}'", level='info')
        
        # Chuy·ªÉn tin nh·∫Øn sang ch·ªØ th∆∞·ªùng ƒë·ªÉ d·ªÖ so s√°nh
        message_lower = message.lower()
        log(f"üîç [FEEDBACK DETECTION] Tin nh·∫Øn sau khi chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng: '{message_lower}'", level='info')
        
        # Ki·ªÉm tra tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát "ph√¢n lo·∫°i ƒë√∫ng l√†"
        if "phan loai dung la" in message_lower.replace("√¢", "a").replace("·∫°", "a").replace("√≥", "o").replace("√∫", "u").replace("·ªë", "o"):
            log("‚úÖ [FEEDBACK DETECTION] Ph√°t hi·ªán ph·∫£n h·ªìi v·ªõi pattern 'phan loai dung la' (kh√¥ng d·∫•u)", level='info')
            return True
            
        if "ph√¢n lo·∫°i ƒë√∫ng l√†" in message_lower:
            log("‚úÖ [FEEDBACK DETECTION] Ph√°t hi·ªán ph·∫£n h·ªìi v·ªõi pattern 'ph√¢n lo·∫°i ƒë√∫ng l√†'", level='info')
            return True
        
        # Ki·ªÉm tra tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát - ph√°t hi·ªán m·∫´u "kh√¥ng ph·∫£i lo·∫°i X m√† ph·∫£i c·ª• th·ªÉ h∆°n"
        if "kh√¥ng ph·∫£i lo·∫°i" in message_lower and "ph·∫£i c·ª• th·ªÉ h∆°n" in message_lower:
            log("‚úÖ [FEEDBACK DETECTION] Ph√°t hi·ªán ph·∫£n h·ªìi v·ªõi pattern 'kh√¥ng ph·∫£i lo·∫°i X m√† ph·∫£i c·ª• th·ªÉ h∆°n'", level='info')
            return True
            
        # Ki·ªÉm tra tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát - c·ª• th·ªÉ cho m·∫´u "finance2023.pdf kh√¥ng ph·∫£i lo·∫°i B√°o c√°o doanh thu m√† ph·∫£i c·ª• th·ªÉ h∆°n v√≠ d·ª• B√°o c√°o doanh thu 2023"
        if "finance2023.pdf kh√¥ng ph·∫£i lo·∫°i" in message_lower:
            log("‚úÖ [FEEDBACK DETECTION] Ph√°t hi·ªán ph·∫£n h·ªìi c·ª• th·ªÉ cho finance2023.pdf", level='info')
            return True
            
        # Ki·ªÉm tra tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
        if ".pdf kh√¥ng ph·∫£i lo·∫°i" in message_lower or ".docx kh√¥ng ph·∫£i lo·∫°i" in message_lower:
            log("‚úÖ [FEEDBACK DETECTION] Ph√°t hi·ªán ph·∫£n h·ªìi v·ªÅ lo·∫°i t√†i li·ªáu (pattern 1)", level='info')
            return True
            
        # Ki·ªÉm tra n·∫øu tin nh·∫Øn ch·ª©a c·∫£ t√™n file v√† t·ª´ "kh√¥ng ph·∫£i"
        file_extensions = [".pdf", ".docx", ".doc", ".txt", ".xlsx", ".ppt", ".pptx"]
        for ext in file_extensions:
            if ext.lower() in message_lower and "kh√¥ng ph·∫£i" in message_lower:
                log(f"‚úÖ [FEEDBACK DETECTION] Ph√°t hi·ªán ph·∫£n h·ªìi v·ªÅ file {ext} (pattern 2)", level='info')
                return True
        
        # Ki·ªÉm tra tr∆∞·ªùng h·ª£p file + ph√¢n lo·∫°i ƒë√∫ng l√†
        for ext in file_extensions:
            if ext.lower() in message_lower:
                # Ki·ªÉm tra c·∫£ phi√™n b·∫£n c√≥ d·∫•u v√† kh√¥ng d·∫•u
                if "ph√¢n lo·∫°i ƒë√∫ng l√†" in message_lower or "phan loai dung la" in message_lower.replace("√¢", "a").replace("·∫°", "a").replace("√≥", "o").replace("√∫", "u").replace("·ªë", "o"):
                    log(f"‚úÖ [FEEDBACK DETECTION] Ph√°t hi·ªán ph·∫£n h·ªìi v·ªÅ ph√¢n lo·∫°i ƒë√∫ng cho file {ext}", level='info')
                    return True
        
        # C√°c m·∫´u nh·∫≠n d·∫°ng ph·∫£n h·ªìi
        feedback_patterns = [
            # M·∫´u cho ph·∫£n h·ªìi tr·ª±c ti·∫øp v·ªÅ ph√¢n lo·∫°i
            r"n√™n ƒë∆∞·ª£c ph√¢n lo[a·∫°]i l√†",
            r"ph√¢n lo[a·∫°]i sai",
            r"ph√¢n lo[a·∫°]i kh√¥ng ch√≠nh x√°c",
            r"c·∫ßn ph√¢n lo[a·∫°]i l·∫°i",
            r"s·ª≠a ph√¢n lo[a·∫°]i",
            r"thay ƒë·ªïi ph√¢n lo[a·∫°]i",
            r"c·∫≠p nh·∫≠t ph√¢n lo[a·∫°]i",
            r"ph√¢n lo[a·∫°]i ƒë√∫ng l√†",
            r"phan loai dung la",  # Th√™m phi√™n b·∫£n kh√¥ng d·∫•u
            r"ph·∫£i c·ª• th·ªÉ h∆°n",
            
            # M·∫´u cho ph·∫£n h·ªìi d·∫°ng "kh√¥ng ph·∫£i X m√† l√† Y"
            r"kh√¥ng ph·∫£i (lo·∫°i|l√†) .+ m√† (ph·∫£i|l√†)",
            r"kh√¥ng ph·∫£i .+ m√† ph·∫£i .+",
            r"kh√¥ng ph·∫£i .+ m√† (c·∫ßn|n√™n)",
            
            # M·∫´u cho ph·∫£n h·ªìi d·∫°ng "X ph·∫£i ƒë∆∞·ª£c ph√¢n lo·∫°i l√† Y"
            r"ph·∫£i ƒë∆∞·ª£c ph√¢n lo[a·∫°]i l√†",
            
            # M·∫´u cho ph·∫£n h·ªìi d·∫°ng "ph√¢n lo·∫°i l·∫°i X th√†nh Y"
            r"ph√¢n lo[a·∫°]i l·∫°i .+ th√†nh",
            
            # Th√™m m·∫´u m·ªõi cho tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
            r"[\w-]+\.(pdf|docx|doc|txt|xlsx|ppt|pptx) ph√¢n lo[a·∫°]i ƒë√∫ng l√†",
            r"[\w-]+\.(pdf|docx|doc|txt|xlsx|ppt|pptx) phan loai dung la"
        ]
        
        # Ki·ªÉm tra t·ª´ng m·∫´u
        log(f"üîç [FEEDBACK DETECTION] Ki·ªÉm tra {len(feedback_patterns)} regex patterns...", level='info')
        for i, pattern in enumerate(feedback_patterns, 1):
            match = re.search(pattern, message_lower)
            if match:
                log(f"‚úÖ [FEEDBACK DETECTION] Ph√°t hi·ªán ph·∫£n h·ªìi theo pattern {i}: '{pattern}'", level='info')
                log(f"‚úÖ [FEEDBACK DETECTION] N·ªôi dung kh·ªõp: '{match.group(0)}'", level='info')
                return True
            else:
                log(f"‚ùå [FEEDBACK DETECTION] Pattern {i} kh√¥ng kh·ªõp: '{pattern}'", level='debug')
        
        # Ki·ªÉm tra n·∫øu tin nh·∫Øn ch·ª©a c·∫£ t√™n file v√† t·ª´ "ph·∫£i"
        log(f"üîç [FEEDBACK DETECTION] Ki·ªÉm tra file extension + 'ph·∫£i'...", level='info')
        if any(ext.lower() in message_lower for ext in file_extensions) and "ph·∫£i" in message_lower:
            log("‚úÖ [FEEDBACK DETECTION] Ph√°t hi·ªán ph·∫£n h·ªìi d·ª±a tr√™n t√™n file v√† t·ª´ 'ph·∫£i' (pattern 3)", level='info')
            return True
                
        log("‚ùå [FEEDBACK DETECTION] Tin nh·∫Øn KH√îNG ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† ph·∫£n h·ªìi", level='info')
        return False
    
    async def extract_feedback_info(self, message: str, llm) -> Dict[str, Any]:
        """
        Tr√≠ch xu·∫•t th√¥ng tin ph·∫£n h·ªìi t·ª´ tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng.
        
        Args:
            message: N·ªôi dung tin nh·∫Øn c·∫ßn tr√≠ch xu·∫•t th√¥ng tin
            llm: LLM instance ƒë·ªÉ ph√¢n t√≠ch ph·∫£n h·ªìi
            
        Returns:
            Th√¥ng tin ph·∫£n h·ªìi ƒë√£ ƒë∆∞·ª£c tr√≠ch xu·∫•t
        """
        try:
            # Ki·ªÉm tra tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát - ph·∫£n h·ªìi y√™u c·∫ßu ph√¢n lo·∫°i c·ª• th·ªÉ h∆°n
            file_pattern = r'([\w-]+\.(pdf|docx|doc|txt|xlsx|ppt|pptx)) kh√¥ng ph·∫£i lo·∫°i ([^\n]+) m√† ph·∫£i c·ª• th·ªÉ h∆°n v√≠ d·ª• ([^\n]+)'
            match = re.search(file_pattern, message)
            if match:
                file_name = match.group(1)
                current_classification = match.group(3)
                correct_classification = match.group(4)
                
                log(f"Ph√°t hi·ªán ph·∫£n h·ªìi ƒë·∫∑c bi·ªát: File {file_name}, ph√¢n lo·∫°i hi·ªán t·∫°i: {current_classification}, ph√¢n lo·∫°i m·ªõi: {correct_classification}", level='info')
                
                return {
                    "file_name": file_name,
                    "current_classification": current_classification,
                    "correct_classification": correct_classification
                }
            
            # Th·ª≠ tr√≠ch xu·∫•t tr·ª±c ti·∫øp t·ª´ m·∫´u "file.pdf ph√¢n lo·∫°i ƒë√∫ng l√† X"
            pattern4 = r'([\w-]+\.(pdf|docx|doc|txt|xlsx|ppt|pptx)) ph√¢n lo·∫°i ƒë√∫ng l√† (.+)'
            match = re.search(pattern4, message.lower())
            if match:
                file_name = match.group(1)
                correct_classification = match.group(3)
                
                log(f"Ph√°t hi·ªán ph·∫£n h·ªìi theo m·∫´u 4 (c·ª• th·ªÉ): File {file_name}, ph√¢n lo·∫°i m·ªõi: {correct_classification}", level='info')
                
                return {
                    "file_name": file_name,
                    "current_classification": None,
                    "correct_classification": correct_classification
                }
                
            # Th·ª≠ tr√≠ch xu·∫•t tr·ª±c ti·∫øp t·ª´ m·∫´u "file.pdf kh√¥ng ph·∫£i lo·∫°i X m√† ph·∫£i c·ª• th·ªÉ h∆°n v√≠ d·ª• Y"
            pattern5 = r'([\w-]+\.(pdf|docx|doc|txt|xlsx|ppt|pptx)) kh√¥ng ph·∫£i lo·∫°i (.+?) m√† ph·∫£i c·ª• th·ªÉ h∆°n v√≠ d·ª• (.+)'
            match = re.search(pattern5, message)
            if match:
                file_name = match.group(1)
                current_classification = match.group(3)
                correct_classification = match.group(4)
                
                log(f"Ph√°t hi·ªán ph·∫£n h·ªìi theo m·∫´u 5 (c·ª• th·ªÉ h∆°n): File {file_name}, ph√¢n lo·∫°i hi·ªán t·∫°i: {current_classification}, ph√¢n lo·∫°i m·ªõi: {correct_classification}", level='info')
                
                return {
                    "file_name": file_name,
                    "current_classification": current_classification,
                    "correct_classification": correct_classification
                }
            
            # Th·ª≠ tr√≠ch xu·∫•t tr·ª±c ti·∫øp t·ª´ m·∫´u "finance2023.pdf kh√¥ng ph·∫£i lo·∫°i B√°o c√°o doanh thu m√† ph·∫£i c·ª• th·ªÉ h∆°n v√≠ d·ª• B√°o c√°o doanh thu 2023"
            if "finance2023.pdf kh√¥ng ph·∫£i lo·∫°i" in message and "m√† ph·∫£i c·ª• th·ªÉ h∆°n" in message:
                # Tr√≠ch xu·∫•t ph√¢n lo·∫°i hi·ªán t·∫°i
                current_match = re.search(r'kh√¥ng ph·∫£i lo·∫°i (.+?) m√†', message)
                current_classification = current_match.group(1) if current_match else "B√°o c√°o doanh thu"
                
                # Tr√≠ch xu·∫•t ph√¢n lo·∫°i m·ªõi
                correct_match = re.search(r'v√≠ d·ª• (.+)$', message)
                correct_classification = correct_match.group(1) if correct_match else "B√°o c√°o doanh thu 2023"
                
                log(f"Ph√°t hi·ªán ph·∫£n h·ªìi ƒë·∫∑c bi·ªát cho finance2023.pdf: ph√¢n lo·∫°i hi·ªán t·∫°i: {current_classification}, ph√¢n lo·∫°i m·ªõi: {correct_classification}", level='info')
                
                return {
                    "file_name": "finance2023.pdf",
                    "current_classification": current_classification,
                    "correct_classification": correct_classification
                }
            
            # S·ª≠ d·ª•ng LLM ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin t·ª´ ph·∫£n h·ªìi
            prompt = f"""
            H√£y ph√¢n t√≠ch ph·∫£n h·ªìi sau ƒë√¢y c·ªßa ng∆∞·ªùi d√πng v√† tr√≠ch xu·∫•t c√°c th√¥ng tin:
            1. T√™n file c·∫ßn ƒëi·ªÅu ch·ªânh ph√¢n lo·∫°i (bao g·ªìm c·∫£ ph·∫ßn m·ªü r·ªông nh∆∞ .pdf, .docx)
            2. Ph√¢n lo·∫°i hi·ªán t·∫°i (n·∫øu c√≥)
            3. Ph√¢n lo·∫°i ƒë√∫ng m√† ng∆∞·ªùi d√πng ƒë·ªÅ xu·∫•t
            
            ƒê·∫∑c bi·ªát ch√∫ √Ω n·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu ph√¢n lo·∫°i c·ª• th·ªÉ h∆°n, chi ti·∫øt h∆°n ho·∫∑c b·ªï sung th√™m th√¥ng tin v√†o ph√¢n lo·∫°i hi·ªán t·∫°i.
            
            Ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng: "{message}"
            
            H√£y tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON v·ªõi c√°c tr∆∞·ªùng sau:
            {{"file_name": "t√™n file", "current_classification": "ph√¢n lo·∫°i hi·ªán t·∫°i", "correct_classification": "ph√¢n lo·∫°i ƒë√∫ng"}}
            
            N·∫øu kh√¥ng th·ªÉ x√°c ƒë·ªãnh b·∫•t k·ª≥ tr∆∞·ªùng n√†o, h√£y ƒë·ªÉ tr·ªëng ho·∫∑c null.
            """
            
            # Ghi log prompt
            log(f"Prompt g·ª≠i ƒë·∫øn LLM: {prompt[:200]}...", level='info')
            
            # G·ªçi LLM ƒë·ªÉ ph√¢n t√≠ch - s·ª≠ d·ª•ng ainvoke nh∆∞ c√°c agent kh√°c
            try:
                response = await llm.ainvoke(prompt)
                response_text = str(response)
                log(f"K·∫øt qu·∫£ t·ª´ LLM (ainvoke): {response_text[:200]}...", level='info')
            except Exception as e:
                log(f"L·ªói khi g·ªçi ainvoke: {e}", level='error')
                try:
                    # Th·ª≠ s·ª≠ d·ª•ng invoke n·∫øu ainvoke kh√¥ng ho·∫°t ƒë·ªông
                    response = llm.invoke(prompt)
                    response_text = str(response)
                    log(f"K·∫øt qu·∫£ t·ª´ LLM (invoke): {response_text[:200]}...", level='info')
                except Exception as e2:
                    log(f"L·ªói khi g·ªçi invoke: {e2}", level='error')
                    # N·∫øu kh√¥ng th·ªÉ g·ªçi LLM, tr√≠ch xu·∫•t th√¥ng tin c∆° b·∫£n t·ª´ tin nh·∫Øn
                    file_match = re.search(r'([\w-]+\.(pdf|docx|doc|txt|xlsx|ppt|pptx))', message)
                    if file_match:
                        return {"file_name": file_match.group(1)}
                    return {}
        
            # Ghi log k·∫øt qu·∫£ t·ª´ LLM
            log(f"K·∫øt qu·∫£ t·ª´ LLM: {response_text[:200]}...", level='info')
            
            # Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ th√†nh JSON
            try:
                # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p markdown code block ```json ... ```
                json_code_block = re.search(r'```(?:json)?\s*\n?(\{.*?\})\s*```', response_text, re.DOTALL)
                if json_code_block:
                    json_str = json_code_block.group(1)
                    log(f"T√¨m th·∫•y JSON trong code block: {json_str[:100]}...", level='info')
                    feedback_info = json.loads(json_str)
                else:
                    # T√¨m chu·ªói JSON trong k·∫øt qu·∫£
                    json_match = re.search(r'\{.*?\}', response_text, re.DOTALL)
                    if json_match:
                        json_str = json_match.group(0)
                        log(f"T√¨m th·∫•y JSON pattern: {json_str[:100]}...", level='info')
                        feedback_info = json.loads(json_str)
                    else:
                        # N·∫øu kh√¥ng t√¨m th·∫•y JSON, th·ª≠ ph√¢n t√≠ch to√†n b·ªô k·∫øt qu·∫£
                        log(f"Kh√¥ng t√¨m th·∫•y JSON pattern, th·ª≠ ph√¢n t√≠ch to√†n b·ªô k·∫øt qu·∫£", level='info')
                        feedback_info = json.loads(response_text)
            except json.JSONDecodeError as e:
                # N·∫øu kh√¥ng th·ªÉ ph√¢n t√≠ch JSON, tr·∫£ v·ªÅ k·∫øt qu·∫£ tr·ªëng
                log(f"Kh√¥ng th·ªÉ ph√¢n t√≠ch JSON t·ª´ k·∫øt qu·∫£ LLM: {str(e)}", level='error')
                log(f"N·ªôi dung response: {response_text[:200]}...", level='error')
                feedback_info = {}
                
            # Ki·ªÉm tra v√† ƒë·∫£m b·∫£o c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
            if not feedback_info.get("file_name") and ".pdf" in message:
                # T√¨m t√™n file trong tin nh·∫Øn
                file_match = re.search(r'([\w-]+\.(pdf|docx|doc|txt|xlsx|ppt|pptx))', message)
                if file_match:
                    feedback_info["file_name"] = file_match.group(1)
                    
            return feedback_info
            
        except Exception as e:
            log(f"L·ªói khi tr√≠ch xu·∫•t th√¥ng tin ph·∫£n h·ªìi: {e}", level='error')
            import traceback
            traceback.print_exc()
            return {}
    
    async def find_file_path(self, file_name: str, state: Dict[str, Any]) -> Optional[str]:
        """
        T√¨m ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß c·ªßa file d·ª±a tr√™n t√™n file.
        
        Args:
            file_name: T√™n file c·∫ßn t√¨m
            state: Tr·∫°ng th√°i hi·ªán t·∫°i
            
        Returns:
            ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß c·ªßa file ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
        """
        # Ki·ªÉm tra trong processed_files
        if "processed_files" in state and state["processed_files"]:
            for file_path in state["processed_files"]:
                if os.path.basename(file_path) == file_name:
                    return file_path
                    
        # Ki·ªÉm tra trong accessible_files
        if "accessible_files" in state and state["accessible_files"]:
            for file_path in state["accessible_files"]:
                if os.path.basename(file_path) == file_name:
                    return file_path
                    
        # Ki·ªÉm tra trong classified_files
        if "classified_files" in state and state["classified_files"]:
            for file_path in state["classified_files"]:
                if os.path.basename(file_path) == file_name:
                    return file_path
                    
        return None
    
    async def apply_context_adaptation(self, feedback_info: Dict[str, Any], state: Dict[str, Any]) -> Dict[str, Any]:
        """
        √Åp d·ª•ng context adaptation d·ª±a tr√™n ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng.
        
        Args:
            feedback_info: Th√¥ng tin ph·∫£n h·ªìi ƒë√£ ƒë∆∞·ª£c tr√≠ch xu·∫•t
            state: Tr·∫°ng th√°i hi·ªán t·∫°i
            
        Returns:
            Tr·∫°ng th√°i ƒë√£ c·∫≠p nh·∫≠t
        """
        try:
            # Ghi log th√¥ng tin ph·∫£n h·ªìi nh·∫≠n ƒë∆∞·ª£c
            log(f"Th√¥ng tin ph·∫£n h·ªìi nh·∫≠n ƒë∆∞·ª£c: {feedback_info}", level='info')
            
            # Ki·ªÉm tra xem c√≥ th√¥ng tin ph·∫£n h·ªìi h·ª£p l·ªá kh√¥ng
            if not feedback_info:
                log("Kh√¥ng c√≥ th√¥ng tin ph·∫£n h·ªìi ƒë·ªÉ √°p d·ª•ng context adaptation", level='warning')
                return state
                
            # Ki·ªÉm tra t√™n file
            if not feedback_info.get("file_name"):
                log("Kh√¥ng t√¨m th·∫•y t√™n file trong ph·∫£n h·ªìi", level='warning')
                return state
                
            # Ki·ªÉm tra ph√¢n lo·∫°i m·ªõi
            if not feedback_info.get("correct_classification"):
                log("Kh√¥ng t√¨m th·∫•y ph√¢n lo·∫°i m·ªõi trong ph·∫£n h·ªìi", level='warning')
                return state
                
            file_name = feedback_info["file_name"]
            correct_classification = feedback_info["correct_classification"]
            
            # C·∫≠p nh·∫≠t k·∫øt qu·∫£ ph√¢n lo·∫°i trong state
            if "classification_results" not in state:
                state["classification_results"] = {}
                
            # T√¨m file path n·∫øu c√≥
            file_path = await self.find_file_path(file_name, state)
            
            # ƒê·∫£m b·∫£o c·∫•u tr√∫c feedback_memory ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ƒë√∫ng
            if "classification_feedback" not in self.feedback_memory:
                self.feedback_memory["classification_feedback"] = {}
                
            # C·∫≠p nh·∫≠t k·∫øt qu·∫£ ph√¢n lo·∫°i
            if file_path:
                state["classification_results"][file_path] = correct_classification
                log(f"C·∫≠p nh·∫≠t ph√¢n lo·∫°i cho file path {file_path} th√†nh: {correct_classification}", level='info')
                
                # L∆∞u v√†o b·ªô nh·ªõ d√†i h·∫°n
                self.feedback_memory["classification_feedback"][file_path] = correct_classification
                self.feedback_memory["classification_feedback"][file_name] = correct_classification  # L∆∞u c·∫£ t√™n file ƒë·ªÉ d·ªÖ t√¨m ki·∫øm
            else:
                # N·∫øu kh√¥ng t√¨m th·∫•y file path, s·ª≠ d·ª•ng t√™n file
                state["classification_results"][file_name] = correct_classification
                log(f"C·∫≠p nh·∫≠t ph√¢n lo·∫°i cho file name {file_name} th√†nh: {correct_classification}", level='info')
                
                # L∆∞u v√†o b·ªô nh·ªõ d√†i h·∫°n
                self.feedback_memory["classification_feedback"][file_name] = correct_classification
                
            # L∆∞u b·ªô nh·ªõ d√†i h·∫°n v√†o file
            self.save_feedback_memory()
            
            # Th√™m v√†o chain of thought
            if "chain_of_thought" not in state:
                state["chain_of_thought"] = []
                
            state["chain_of_thought"].append(f"üë§ ƒê√£ c·∫≠p nh·∫≠t ph√¢n lo·∫°i cho file {file_name} th√†nh: {correct_classification}")
            
            # ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω ph·∫£n h·ªìi
            state["feedback_processed"] = True
            
            # Th√™m th√¥ng b√°o x√°c nh·∫≠n
            if "messages" in state and isinstance(state["messages"], list):
                confirmation = f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t ph√¢n lo·∫°i cho file {file_name} th√†nh: {correct_classification}"
                from langchain.schema import AIMessage
                state["messages"].append(AIMessage(content=confirmation))
            else:
                # ƒê·∫£m b·∫£o state c√≥ tr∆∞·ªùng messages
                state["messages"] = []
                confirmation = f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t ph√¢n lo·∫°i cho file {file_name} th√†nh: {correct_classification}"
                from langchain.schema import AIMessage
                state["messages"].append(AIMessage(content=confirmation))
            
            return state
            
        except Exception as e:
            log(f"L·ªói khi √°p d·ª•ng context adaptation: {e}", level='error')
            return state
    
    async def process_feedback(self, state: Dict[str, Any], last_message: str) -> Dict[str, Any]:
        """
        X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ ng∆∞·ªùi d√πng v√† √°p d·ª•ng context adaptation.
        
        Args:
            state: Tr·∫°ng th√°i hi·ªán t·∫°i
            last_message: N·ªôi dung tin nh·∫Øn ph·∫£n h·ªìi c·ªßa ng∆∞·ªùi d√πng
            
        Returns:
            Tr·∫°ng th√°i ƒë√£ c·∫≠p nh·∫≠t
        """
        try:
            # Import LLM ƒë·ªÉ s·ª≠ d·ª•ng cho vi·ªác x·ª≠ l√Ω ph·∫£n h·ªìi
            from config.llm import gemini
            
            log(f"B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ph·∫£n h·ªìi: {last_message[:100]}...", level='info')
            
            # Ki·ªÉm tra xem c√≥ ph·∫£i l√† ph·∫£n h·ªìi kh√¥ng
            is_feedback = await self.is_feedback_message(last_message)
            if not is_feedback:
                log("Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† ph·∫£n h·ªìi", level='info')
                return state
                
            log("Ph√°t hi·ªán ph·∫£n h·ªìi t·ª´ ng∆∞·ªùi d√πng, b·∫Øt ƒë·∫ßu x·ª≠ l√Ω...", level='info')
            
            # Ki·ªÉm tra xem state c√≥ ch·ª©a k·∫øt qu·∫£ ph√¢n lo·∫°i kh√¥ng
            if not state.get("classification_results"):
                # N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£ ph√¢n lo·∫°i, t·∫°o m·ªôt dictionary tr·ªëng
                state["classification_results"] = {}
                log("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√¢n lo·∫°i hi·ªán t·∫°i, t·∫°o m·ªõi", level='warning')
            
            # Tr√≠ch xu·∫•t th√¥ng tin t·ª´ ph·∫£n h·ªìi
            log("Tr√≠ch xu·∫•t th√¥ng tin t·ª´ ph·∫£n h·ªìi...", level='info')
            feedback_info = await self.extract_feedback_info(last_message, gemini)
            
            # Ghi log th√¥ng tin tr√≠ch xu·∫•t ƒë∆∞·ª£c
            log(f"Th√¥ng tin tr√≠ch xu·∫•t: {feedback_info}", level='info')
            
            # √Åp d·ª•ng context adaptation
            log("√Åp d·ª•ng context adaptation...", level='info')
            updated_state = await self.apply_context_adaptation(feedback_info, state)
            
            # ƒê√°nh d·∫•u ƒë√£ x·ª≠ l√Ω ph·∫£n h·ªìi
            if "used_tools" not in updated_state:
                updated_state["used_tools"] = []
            if "human_feedback" not in updated_state["used_tools"]:
                updated_state["used_tools"].append("human_feedback")
                
            # Th√™m v√†o chain of thought
            if "chain_of_thought" not in updated_state:
                updated_state["chain_of_thought"] = []
            updated_state["chain_of_thought"].append(f"üë§ ƒê√£ x·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ ng∆∞·ªùi d√πng v√† c·∫≠p nh·∫≠t ph√¢n lo·∫°i")
            
            # Th√™m th√¥ng b√°o x√°c nh·∫≠n v√†o messages
            if feedback_info.get("file_name") and feedback_info.get("correct_classification"):
                confirmation = f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t ph√¢n lo·∫°i cho file {feedback_info['file_name']} th√†nh: {feedback_info['correct_classification']}"
                updated_state["messages"].append(AIMessage(content=confirmation))
            
            return updated_state
            
        except Exception as e:
            log(f"L·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ ng∆∞·ªùi d√πng: {e}", level='error')
            import traceback
            traceback.print_exc()
            return state
