import os
import sys
import streamlit as st
import asyncio
import time
import threading
import types
import grpc.aio
import uuid
import logging
import warnings

from agents.multi_agents import create_supervisor_agent, process
from utils.db_manager import ChatHistoryDB

# Suppress schema validation warnings
logging.getLogger('jsonschema').setLevel(logging.ERROR)
warnings.filterwarnings('ignore', message='.*additionalProperties.*')
warnings.filterwarnings('ignore', message=r'.*\$schema.*')

# Fix for gRPC InterceptedCall.__del__ error
# Monkey patch ƒë·ªÉ tr√°nh l·ªói InterceptedCall.__del__
original_del = grpc.aio._interceptor.InterceptedCall.__del__
def safe_del(self):
    try:
        original_del(self)
    except Exception as e:
        pass
grpc.aio._interceptor.InterceptedCall.__del__ = safe_del

# Th√™m ƒë∆∞·ªùng d·∫´n g·ªëc v√†o sys.path ƒë·ªÉ import c√°c module
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from agents.multi_agents import create_supervisor_agent, process
from utils.pretty_print_message import pretty_print_messages

# Set page config
st.set_page_config(
    page_title="AI Document Classifier Chat",
    page_icon="üìÑ",
    layout="wide"
)

# Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu
db = ChatHistoryDB()

# Initialize session state
if "messages" not in st.session_state:
    st.session_state.messages = []

if "supervisor" not in st.session_state:
    st.session_state.supervisor = None

if "initialized" not in st.session_state:
    st.session_state.initialized = False
    
if "current_session_id" not in st.session_state:
    # T·∫°o session ID m·ªõi cho phi√™n chat hi·ªán t·∫°i
    st.session_state.current_session_id = f"session_{uuid.uuid4().hex[:8]}"
    # T·∫°o phi√™n chat m·ªõi trong c∆° s·ªü d·ªØ li·ªáu
    db.create_session(st.session_state.current_session_id, title="Chat m·ªõi")

if "chat_sessions" not in st.session_state:
    # L·∫•y danh s√°ch c√°c phi√™n chat t·ª´ c∆° s·ªü d·ªØ li·ªáu
    st.session_state.chat_sessions = db.get_all_sessions()

# Initialize agent
async def initialize_agents():
    try:
        with st.spinner("ƒêang kh·ªüi t·∫°o agents..."):
            supervisor = await create_supervisor_agent()
            st.session_state.supervisor = supervisor
            st.session_state.initialized = True
            print(f"Supervisor type: {type(supervisor)}")
            return "Kh·ªüi t·∫°o th√†nh c√¥ng!"
    except Exception as e:
        return f"L·ªói kh·ªüi t·∫°o agents: {str(e)}"

# Process user query
async def process_query(supervisor, query):
    """Process a query using the supervisor agent and yield streaming responses."""
    try:
        print(f"\n[app.process_query] Nh·∫≠n query: '{query}'")
        print(f"[app.process_query] Supervisor type: {type(supervisor)}")
        
        # G·ªçi h√†m process t·ª´ multi_agents.py ƒë·ªÉ x·ª≠ l√Ω query
        result = await process(supervisor, query)
        print(f"[app.process_query] ƒê√£ nh·∫≠n k·∫øt qu·∫£ t·ª´ process(): {type(result)}")
        
        # Bi·∫øn ƒë·ªÉ theo d√µi c√°c ph·∫£n h·ªìi ƒë√£ xu·∫•t
        yielded_responses = set()
        
        # Th√™m h√†m an to√†n ƒë·ªÉ c·∫≠p nh·∫≠t UI Streamlit
        def safe_streamlit_update(func):
            try:
                return func()
            except st.errors.NoSessionContext:
                print("[app.process_query] B·ªè qua c·∫≠p nh·∫≠t UI do kh√¥ng c√≥ session context")
                return None
        
        # X·ª≠ l√Ω k·∫øt qu·∫£ streaming
        async for chunk in result:
            print(f"\n[app.process_query] Nh·∫≠n chunk: {type(chunk)}")
            
            try:
                # X·ª≠ l√Ω AddableUpdatesDict t·ª´ LangGraph
                if hasattr(chunk, 'get') and callable(chunk.get):
                    # Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát: AddableUpdatesDict t·ª´ LangGraph
                    for agent_name in chunk.keys():
                        print(f"[app.process_query] X·ª≠ l√Ω agent: {agent_name}")
                        agent_data = chunk.get(agent_name)
                        
                        if isinstance(agent_data, dict) and 'messages' in agent_data:
                            messages = agent_data['messages']
                            if isinstance(messages, list) and len(messages) > 0:
                                for msg in messages:
                                    if hasattr(msg, 'content'):
                                        content = msg.content
                                        # Ki·ªÉm tra n·ªôi dung ƒë√£ xu·∫•t ch∆∞a
                                        if content not in yielded_responses:
                                            print(f"[app.process_query] Ph·∫£n h·ªìi m·ªõi t·ª´ {agent_name}: {content[:100]}...")
                                            yield f"{agent_name}: {content}"
                                            safe_streamlit_update(lambda: yielded_responses.add(content))
                
                # X·ª≠ l√Ω c√°c lo·∫°i chunk kh√°c nhau
                elif isinstance(chunk, dict):
                    # Tr∆∞·ªùng h·ª£p 1: chunk l√† dict v·ªõi c√°c agent name l√† key
                    for agent_name, messages in chunk.items():
                        print(f"[app.process_query] Agent: {agent_name}, Messages: {type(messages)}")
                        
                        if isinstance(messages, list):
                            for message in messages:
                                if hasattr(message, 'content'):
                                    # N·∫øu message l√† AIMessage ho·∫∑c c√≥ thu·ªôc t√≠nh content
                                    content = message.content
                                    if content not in yielded_responses:
                                        print(f"Yielding response from {agent_name}: {content[:50]}...")
                                        yield f"{agent_name}: {content}"
                                        safe_streamlit_update(lambda: yielded_responses.add(content))
                                elif isinstance(message, dict) and 'content' in message:
                                    # N·∫øu message l√† dict v·ªõi key 'content'
                                    content = message['content']
                                    if content not in yielded_responses:
                                        print(f"Yielding response from {agent_name} (dict): {content[:50]}...")
                                        yield f"{agent_name}: {content}"
                                        safe_streamlit_update(lambda: yielded_responses.add(content))
                        elif hasattr(messages, 'content'):
                            # N·∫øu messages l√† m·ªôt message duy nh·∫•t
                            content = messages.content
                            if content not in yielded_responses:
                                print(f"Yielding response from {agent_name} (single): {content[:50]}...")
                                yield f"{agent_name}: {content}"
                                safe_streamlit_update(lambda: yielded_responses.add(content))
                        elif isinstance(messages, str):
                            # N·∫øu messages l√† string
                            if messages not in yielded_responses:
                                print(f"Yielding response from {agent_name} (string): {messages[:50]}...")
                                yield f"{agent_name}: {messages}"
                                safe_streamlit_update(lambda: yielded_responses.add(messages))
                elif hasattr(chunk, 'messages') and isinstance(chunk.messages, list):
                    # Tr∆∞·ªùng h·ª£p 2: chunk c√≥ thu·ªôc t√≠nh messages l√† list
                    for message in chunk.messages:
                        if hasattr(message, 'content'):
                            content = message.content
                            agent = getattr(message, 'name', 'Agent')
                            if content not in yielded_responses:
                                print(f"Yielding response from {agent}: {content[:50]}...")
                                yield f"{agent}: {content}"
                                safe_streamlit_update(lambda: yielded_responses.add(content))
                elif isinstance(chunk, str):
                    # Tr∆∞·ªùng h·ª£p 3: chunk l√† string
                    if chunk not in yielded_responses:
                        print(f"Yielding direct string response: {chunk[:50]}...")
                        yield chunk
                        safe_streamlit_update(lambda: yielded_responses.add(chunk))
                else:
                    # Tr∆∞·ªùng h·ª£p kh√°c: chunk kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c
                    chunk_str = str(chunk)
                    if chunk_str not in yielded_responses:
                        print(f"[app.process_query] Kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c chunk: {type(chunk)}")
                        yield f"Ph·∫£n h·ªìi t·ª´ h·ªá th·ªëng: {chunk_str}"
                        safe_streamlit_update(lambda: yielded_responses.add(chunk_str))
            except Exception as chunk_error:
                print(f"[app.process_query] L·ªói khi x·ª≠ l√Ω chunk: {str(chunk_error)}")
                import traceback
                traceback.print_exc()
                yield f"L·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi: {str(chunk_error)}"
    
    except Exception as e:
        print(f"[app.process_query] L·ªói: {str(e)}")
        import traceback
        traceback.print_exc()
        yield f"L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu: {str(e)}"

# Sidebar
st.sidebar.title("üìÑ Document Classifier")
st.sidebar.info("·ª®ng d·ª•ng n√†y s·ª≠ d·ª•ng AI ƒë·ªÉ ph√¢n lo·∫°i v√† tr√≠ch xu·∫•t th√¥ng tin t·ª´ t√†i li·ªáu.")

# Th√™m ph·∫ßn l·ªãch s·ª≠ chat
with st.sidebar.expander("L·ªãch s·ª≠ chat", expanded=False):
    # N√∫t t·∫°o chat m·ªõi
    if st.button("T·∫°o chat m·ªõi", key="new_chat"):
        # T·∫°o session ID m·ªõi
        st.session_state.current_session_id = f"session_{uuid.uuid4().hex[:8]}"
        # T·∫°o phi√™n chat m·ªõi trong c∆° s·ªü d·ªØ li·ªáu
        db.create_session(st.session_state.current_session_id, title="Chat m·ªõi")
        # X√≥a tin nh·∫Øn hi·ªán t·∫°i
        st.session_state.messages = []
        # C·∫≠p nh·∫≠t danh s√°ch phi√™n chat
        st.session_state.chat_sessions = db.get_all_sessions()
        st.rerun()
    
    # Hi·ªÉn th·ªã danh s√°ch c√°c phi√™n chat
    st.subheader("C√°c phi√™n chat tr∆∞·ªõc ƒë√¢y")
    
    # C·∫≠p nh·∫≠t danh s√°ch phi√™n chat
    st.session_state.chat_sessions = db.get_all_sessions()
    
    # Hi·ªÉn th·ªã t·ª´ng phi√™n chat d∆∞·ªõi d·∫°ng n√∫t
    for session in st.session_state.chat_sessions:
        session_title = session['title'] or f"Chat {session['id']}"
        if st.button(f"{session_title} ({session['created_at'][:10]})", key=f"session_{session['session_id']}"):
            # ƒê·ªïi sang phi√™n chat ƒë∆∞·ª£c ch·ªçn
            st.session_state.current_session_id = session['session_id']
            # L·∫•y tin nh·∫Øn t·ª´ phi√™n chat n√†y
            messages = db.get_session_messages(session['session_id'])
            # Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng tin nh·∫Øn
            st.session_state.messages = [{"role": msg['role'], "content": msg['content']} for msg in messages]
            st.rerun()

# Th√™m th√¥ng tin v·ªÅ d·ª± √°n
with st.sidebar.expander("Th√¥ng tin d·ª± √°n"):
    st.write("""
    ### ·ª®ng d·ª•ng Chat AI ch·∫°y Local LLM t√≠ch h·ª£p MCP
    
    **Ch·ª©c nƒÉng ch√≠nh:**
    - T√¨m ki·∫øm n·ªôi dung trong th∆∞ m·ª•c file
    - Ph√¢n lo·∫°i file d·ª±a tr√™n n·ªôi dung
    - G·ª≠i metadata file qua API MCP Cloud
    - Hi·ªÉn th·ªã k·∫øt qu·∫£ tr√™n giao di·ªán chat
    - L∆∞u tr·ªØ l·ªãch s·ª≠ chat v√†o SQLite
    """)

# Main content
st.title("üìÑ AI Document Classifier Chat")

# Initialize button
if not st.session_state.initialized:
    if st.sidebar.button("Kh·ªüi t·∫°o Agents"):
        init_message = asyncio.run(initialize_agents())
        st.sidebar.success(init_message)
        # Th√™m tin nh·∫Øn ch√†o m·ª´ng
        welcome_msg = "Xin ch√†o! T√¥i l√† AI Assistant. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm, ph√¢n lo·∫°i v√† tr√≠ch xu·∫•t th√¥ng tin t·ª´ t√†i li·ªáu. H√£y nh·∫≠p y√™u c·∫ßu c·ªßa b·∫°n."
        st.session_state.messages.append({"role": "assistant", "content": welcome_msg})

# Display chat messages
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Chat input
if st.session_state.initialized:
    if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."):
        # L∆∞u tin nh·∫Øn v√†o l·ªãch s·ª≠ v√† c∆° s·ªü d·ªØ li·ªáu
        st.session_state.messages.append({"role": "user", "content": prompt})
        db.add_message(st.session_state.current_session_id, "user", prompt)
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # X·ª≠ l√Ω c√¢u h·ªèi v√† hi·ªÉn th·ªã ph·∫£n h·ªìi
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            full_response = ""
            
            # X·ª≠ l√Ω streaming response
            response_text = [""]
            thinking_state = {"active": True}  # S·ª≠ d·ª•ng dict ƒë·ªÉ c√≥ th·ªÉ thay ƒë·ªïi gi√° tr·ªã t·ª´ b√™n trong h√†m
            thinking_dots = ["", ".", "..", "..."]
            
            # H√†m an to√†n ƒë·ªÉ c·∫≠p nh·∫≠t UI Streamlit cho animation
            def safe_animation_update(content):
                try:
                    message_placeholder.markdown(content)
                    return True
                except st.errors.NoSessionContext:
                    print("[show_thinking_animation] B·ªè qua c·∫≠p nh·∫≠t UI do kh√¥ng c√≥ session context")
                    return False
                
            # H√†m hi·ªÉn th·ªã animation "Chain of Thought"
            def show_thinking_animation():
                thinking_idx = 0
                while thinking_state["active"]:
                    safe_animation_update(f"*ƒêang suy nghƒ©{thinking_dots[thinking_idx % len(thinking_dots)]}*")
                    thinking_idx += 1
                    time.sleep(0.3)
            
            # B·∫Øt ƒë·∫ßu animation trong thread ri√™ng
            thinking_thread = threading.Thread(target=show_thinking_animation)
            thinking_thread.daemon = True
            thinking_thread.start()
            
            async def process_streaming_response():
                try:
                    # S·ª≠ d·ª•ng h√†m process_query ƒë·ªÉ x·ª≠ l√Ω c√¢u h·ªèi
                    print("Starting process_query with supervisor...")
                    
                    # Ki·ªÉm tra supervisor ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
                    if not hasattr(st.session_state, 'supervisor') or st.session_state.supervisor is None:
                        thinking_state["active"] = False
                        time.sleep(0.5)  # ƒê·ª£i animation d·ª´ng
                        response_text[0] = "H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o. Vui l√≤ng kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng."
                        message_placeholder.markdown(response_text[0])
                        return
                    
                    # G·ªçi process_query v·ªõi supervisor v√† prompt
                    first_chunk = True
                    async for response_chunk in process_query(st.session_state.supervisor, prompt):
                        if first_chunk:
                            # D·ª´ng animation khi c√≥ ph·∫£n h·ªìi ƒë·∫ßu ti√™n
                            thinking_state["active"] = False
                            time.sleep(0.5)  # ƒê·ª£i animation d·ª´ng
                            response_text[0] = ""  # X√≥a "Chain of Thought"
                            first_chunk = False
                        
                        response_text[0] += response_chunk + "\n\n"
                        message_placeholder.markdown(response_text[0])
                except Exception as e:
                    thinking_state["active"] = False
                    time.sleep(0.5)  # ƒê·ª£i animation d·ª´ng
                    print(f"Error in process_streaming_response: {e}")
                    import traceback
                    traceback.print_exc()
                    response_text[0] += f"\n\nL·ªói: {str(e)}"
                    message_placeholder.markdown(response_text[0])
            
            # Ch·∫°y h√†m async - s·ª≠ d·ª•ng event loop hi·ªán t·∫°i n·∫øu c√≥ th·ªÉ
            try:
                # Th·ª≠ l·∫•y event loop hi·ªán t·∫°i
                loop = asyncio.get_event_loop()
                if loop.is_closed():
                    # N·∫øu ƒë√£ ƒë√≥ng, t·∫°o m·ªõi
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                loop.run_until_complete(process_streaming_response())
            except Exception as e:
                print(f"L·ªói khi ch·∫°y event loop: {str(e)}")
                # Fallback n·∫øu c√≥ l·ªói
                asyncio.run(process_streaming_response())
        
        # L∆∞u ph·∫£n h·ªìi v√†o l·ªãch s·ª≠ v√† c∆° s·ªü d·ªØ li·ªáu
        st.session_state.messages.append({"role": "assistant", "content": response_text[0]})
        db.add_message(st.session_state.current_session_id, "assistant", response_text[0])
else:
    st.info("Vui l√≤ng kh·ªüi t·∫°o agents t·ª´ sidebar tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu chat.")
